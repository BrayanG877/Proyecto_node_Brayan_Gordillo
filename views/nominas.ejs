<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nóminas de Acme Corporate</title>
    <!-- Enlace a tu archivo CSS personalizado -->
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="background"></div>
    <div class="page-wrapper"> <!-- Cambiado de 'container' a 'page-wrapper' -->
        <h1 class="page-main-title">Nóminas de Acme Corporate</h1> <!-- Título principal de la página -->
        
        <div class="content-grid"> <!-- Nuevo contenedor para el formulario y la tabla lado a lado -->
            <!-- Formulario para Crear Nueva Nómina -->
            <form id="createNominaForm" class="form-section glass-card"> <!-- 'glass-card' aplicado aquí -->
                <h2>Crear Nueva Nómina</h2>
                
                <div class="form-group">
                    <label for="empleadoId">Empleado:</label>
                    <select id="empleadoId" name="empleadoId" required>
                        <option value="">Seleccione un empleado</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="periodo">Periodo:</label>
                    <input type="text" id="periodo" name="periodo" required placeholder="Ej: 2023-01">
                </div>
                <div class="form-group">
                    <label for="fechaEmision">Fecha de Emisión:</label>
                    <input type="date" id="fechaEmision" name="fechaEmision" required>
                </div>
                <div class="form-group">
                    <label for="salarioBruto">Salario Bruto:</label>
                    <input type="number" step="0.01" id="salarioBruto" name="salarioBruto" required>
                </div>

                <div class="form-group full-width"> <!-- Clase 'full-width' para ocupar todo el ancho en grid -->
                    <h3>Devengos:</h3>
                    <div id="createDevengosContainer">
                        <!-- Devengos se añadirán aquí -->
                    </div>
                    <button type="button" onclick="addConceptField('createDevengosContainer', 'devengos')" class="form-submit-btn">Añadir Devengo</button>
                </div>

                <div class="form-group full-width"> <!-- Clase 'full-width' para ocupar todo el ancho en grid -->
                    <h3>Deducciones:</h3>
                    <div id="createDeduccionesContainer">
                        <!-- Deducciones se añadirán aquí -->
                    </div>
                    <button type="button" onclick="addConceptField('createDeduccionesContainer', 'deducciones')" class="form-submit-btn">Añadir Deducción</button>
                </div>

                <div class="form-group full-width text-center"> <!-- Clase 'full-width' y 'text-center' -->
                    <button type="submit" class="form-submit-btn">
                        Añadir Nómina
                    </button>
                </div>
            </form>

            <!-- Tabla de Nóminas -->
            <div class="table-section glass-card"> <!-- 'glass-card' aplicado aquí -->
                <h2>Nóminas Existentes</h2> <!-- Título para la tabla -->
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Periodo</th>
                                <th>Fecha Emisión</th>
                                <th>Empleado</th>
                                <th>Salario Bruto</th>
                                <th>Total Devengos</th>
                                <th>Total Deducciones</th>
                                <th>Salario Neto</th>
                                <th class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="nominasTableBody">
                            <!-- Los datos de las nóminas se cargarán aquí dinámicamente -->
                            <tr>
                                <td colspan="9" class="table-message">Cargando nóminas...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="back-button-wrapper"> <!-- Contenedor para el botón de volver -->
            <a href="/" class="back-to-main-btn">
                Volver a la Página Principal
            </a>
        </div>
    </div>

    <!-- Modal para Editar Nómina -->
    <div id="editNominaModal" class="modal">
        <div class="modal-content large">
            <span class="close-button" onclick="closeEditModal()">&times;</span>
            <h2>Editar Nómina</h2>
            <form id="editNominaForm" class="modal-form-grid">
                <input type="hidden" id="editNominaId">
                <div class="form-group">
                    <label for="editEmpleadoId">Empleado:</label>
                    <select id="editEmpleadoId" name="empleadoId" required>
                        <option value="">Seleccione un empleado</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editPeriodo">Periodo:</label>
                    <input type="text" id="editPeriodo" name="periodo" required>
                </div>
                <div class="form-group">
                    <label for="editFechaEmision">Fecha de Emisión:</label>
                    <input type="date" id="editFechaEmision" name="fechaEmision" required>
                </div>
                <div class="form-group">
                    <label for="editSalarioBruto">Salario Bruto:</label>
                    <input type="number" step="0.01" id="editSalarioBruto" name="salarioBruto" required>
                </div>

                <div class="form-group full-width">
                    <h3>Devengos:</h3>
                    <div id="editDevengosContainer">
                        <!-- Devengos de edición se añadirán aquí -->
                    </div>
                    <button type="button" onclick="addConceptField('editDevengosContainer', 'devengos', true)" class="form-submit-btn">Añadir Devengo</button>
                </div>

                <div class="form-group full-width">
                    <h3>Deducciones:</h3>
                    <div id="editDeduccionesContainer">
                        <!-- Deducciones de edición se añadirán aquí -->
                    </div>
                    <button type="button" onclick="addConceptField('editDeduccionesContainer', 'deducciones', true)" class="form-submit-btn">Añadir Deducción</button>
                </div>

                <div class="form-group full-width text-center">
                    <button type="submit" class="form-submit-btn">
                        Guardar Cambios
                    </button>
                    <button type="button" onclick="closeEditModal()" class="form-submit-btn cancel-btn">
                        Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        const nominasTableBody = document.getElementById('nominasTableBody');
        const createNominaForm = document.getElementById('createNominaForm');
        const editNominaModal = document.getElementById('editNominaModal');
        const editNominaForm = document.getElementById('editNominaForm');
        const editNominaId = document.getElementById('editNominaId');
        const editEmpleadoId = document.getElementById('editEmpleadoId');
        const editPeriodo = document.getElementById('editPeriodo');
        const editFechaEmision = document.getElementById('editFechaEmision');
        const editSalarioBruto = document.getElementById('editSalarioBruto');
        const createDevengosContainer = document.getElementById('createDevengosContainer');
        const createDeduccionesContainer = document.getElementById('createDeduccionesContainer');
        const editDevengosContainer = document.getElementById('editDevengosContainer');
        const editDeduccionesContainer = document.getElementById('editDeduccionesContainer');

        // Función para cargar empleados para los selectores
        async function loadEmpleadoOptions() {
            try {
                const response = await fetch(window.location.origin + '/api/empleados');
                const empleados = await response.json();

                const empleadoSelects = [document.getElementById('empleadoId'), editEmpleadoId];

                empleadoSelects.forEach(select => {
                    select.innerHTML = '<option value="">Seleccione un empleado</option>';
                    empleados.forEach(empleado => {
                        const option = document.createElement('option');
                        option.value = empleado._id;
                        option.textContent = `${empleado.nombre} ${empleado.apellido} (${empleado.documento})`;
                        select.appendChild(option);
                    });
                });
            } catch (error) {
                console.error('Error al cargar opciones de empleados:', error);
                alert('Error al cargar empleados para los selectores.');
            }
        }

        // Función para añadir campos de concepto (devengos/deducciones)
        function addConceptField(containerId, type, isEdit = false, concept = { concepto: '', valor: '', _id: '' }) {
            const container = document.getElementById(containerId);
            const div = document.createElement('div');
            div.classList.add('concept-item');
            div.innerHTML = `
                <input type="text" placeholder="Concepto" value="${concept.concepto}"
                       class="concept-input"
                       name="${type}Concept">
                <input type="number" step="0.01" placeholder="Valor" value="${concept.valor}"
                       class="concept-input"
                       name="${type}Value">
                ${isEdit && concept._id ? `<input type="hidden" name="${type}Id" value="${concept._id}">` : ''}
                <button type="button" onclick="this.parentElement.remove()" class="remove-concept-btn">X</button>
            `;
            container.appendChild(div);
        }

        // Función para cargar las nóminas desde la API
        async function loadNominas() {
            nominasTableBody.innerHTML = `<tr><td colspan="9" class="table-message">Cargando nóminas...</td></tr>`;
            try {
                const response = await fetch(window.location.origin + '/api/nominas'); 
                if (!response.ok) {
                    throw new Error(`Error HTTP: ${response.status}`);
                }
                const nominas = await response.json();

                nominasTableBody.innerHTML = ''; // Limpiar la tabla
                if (nominas.length === 0) {
                    nominasTableBody.innerHTML = `<tr><td colspan="9" class="table-message">No se encontraron nóminas.</td></tr>`;
                    return;
                }

                nominas.forEach(nomina => {
                    const row = document.createElement('tr');
                    const fechaEmision = nomina.fechaEmision ? new Date(nomina.fechaEmision).toLocaleDateString() : 'N/A';
                    row.innerHTML = `
                        <td>${nomina._id}</td>
                        <td>${nomina.periodo}</td>
                        <td>${fechaEmision}</td>
                        <td>${nomina.empleado ? nomina.empleado.nombre + ' ' + nomina.empleado.apellido : 'N/A'}</td>
                        <td>$${nomina.salarioBruto ? nomina.salarioBruto.toFixed(2) : '0.00'}</td>
                        <td>$${nomina.totalDevengos ? nomina.totalDevengos.toFixed(2) : '0.00'}</td>
                        <td>$${nomina.totalDeducciones ? nomina.totalDeducciones.toFixed(2) : '0.00'}</td>
                        <td>$${nomina.salarioNeto ? nomina.salarioNeto.toFixed(2) : '0.00'}</td>
                        <td class="action-buttons">
                            <button onclick="openEditModal(
                                '${nomina._id}',
                                '${nomina.empleadoId}',
                                '${nomina.periodo}',
                                '${nomina.fechaEmision ? nomina.fechaEmision.split('T')[0] : ''}',
                                ${nomina.salarioBruto},
                                ${JSON.stringify(nomina.devengos || [])},
                                ${JSON.stringify(nomina.deducciones || [])}
                            )"
                                class="edit-btn">Editar</button>
                            <button onclick="deleteNomina('${nomina._id}')" class="delete-btn">Eliminar</button>
                        </td>
                    `;
                    nominasTableBody.appendChild(row);
                });

            } catch (error) {
                console.error('Error al cargar las nóminas:', error);
                nominasTableBody.innerHTML = `<tr><td colspan="9" class="table-message table-error">Error al cargar las nóminas: ${error.message}</td></tr>`;
            }
        }

        // Función para crear una nueva nómina
        createNominaForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const formData = new FormData(createNominaForm);
            const data = Object.fromEntries(formData.entries());

            // Procesar devengos y deducciones
            const devengos = [];
            const deducciones = [];

            // Recorrer los campos de concepto y valor para devengos
            createNominaForm.querySelectorAll('#createDevengosContainer .concept-item').forEach(item => {
                const concepto = item.querySelector('[name="devengosConcept"]').value;
                const valor = item.querySelector('[name="devengosValue"]').value;
                if (concepto && valor) {
                    devengos.push({ concepto, valor: parseFloat(valor) });
                }
            });

            // Recorrer los campos de concepto y valor para deducciones
            createNominaForm.querySelectorAll('#createDeduccionesContainer .concept-item').forEach(item => {
                const concepto = item.querySelector('[name="deduccionesConcept"]').value;
                const valor = item.querySelector('[name="deduccionesValue"]').value;
                if (concepto && valor) {
                    deducciones.push({ concepto, valor: parseFloat(valor) });
                }
            });

            data.devengos = devengos;
            data.deducciones = deducciones;

            try {
                const response = await fetch(window.location.origin + '/api/nominas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                createNominaForm.reset(); // Limpiar el formulario
                createDevengosContainer.innerHTML = ''; // Limpiar devengos
                createDeduccionesContainer.innerHTML = ''; // Limpiar deducciones
                loadNominas(); // Recargar la tabla
                alert('Nómina creada exitosamente!');
            } catch (error) {
                console.error('Error al crear nómina:', error);
                alert(`Error al crear nómina: ${error.message}`);
            }
        });

        // Funciones para el modal de edición
        function openEditModal(id, empleadoId, periodo, fechaEmision, salarioBruto, devengos, deducciones) {
            editNominaId.value = id;
            editEmpleadoId.value = empleadoId;
            editPeriodo.value = periodo;
            editFechaEmision.value = fechaEmision; // Formato YYYY-MM-DD
            editSalarioBruto.value = salarioBruto;

            // Limpiar y cargar devengos existentes
            editDevengosContainer.innerHTML = '';
            devengos.forEach(d => addConceptField('editDevengosContainer', 'devengos', true, d));

            // Limpiar y cargar deducciones existentes
            editDeduccionesContainer.innerHTML = '';
            deducciones.forEach(d => addConceptField('editDeduccionesContainer', 'deducciones', true, d));

            editNominaModal.style.display = 'flex'; // Mostrar el modal
        }

        function closeEditModal() {
            editNominaModal.style.display = 'none'; // Ocultar el modal
        }

        // Función para actualizar una nómina
        editNominaForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const id = editNominaId.value;
            const formData = new FormData(editNominaForm);
            const data = Object.fromEntries(formData.entries());

            // Procesar devengos y deducciones del formulario de edición
            const devengos = [];
            const deducciones = [];

            editNominaForm.querySelectorAll('#editDevengosContainer .concept-item').forEach(item => {
                const concepto = item.querySelector('[name="devengosConcept"]').value;
                const valor = item.querySelector('[name="devengosValue"]').value;
                const conceptId = item.querySelector('[name="devengosId"]') ? item.querySelector('[name="devengosId"]').value : '';
                if (concepto && valor) {
                    devengos.push({ _id: conceptId, concepto, valor: parseFloat(valor) });
                }
            });

            editNominaForm.querySelectorAll('#editDeduccionesContainer .concept-item').forEach(item => {
                const concepto = item.querySelector('[name="deduccionesConcept"]').value;
                const valor = item.querySelector('[name="deduccionesValue"]').value;
                const conceptId = item.querySelector('[name="deduccionesId"]') ? item.querySelector('[name="deduccionesId"]').value : '';
                if (concepto && valor) {
                    deducciones.push({ _id: conceptId, concepto, valor: parseFloat(valor) });
                }
            });

            data.devengos = devengos;
            data.deducciones = deducciones;

            try {
                const response = await fetch(window.location.origin + `/api/nominas/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                closeEditModal(); // Cerrar el modal
                loadNominas(); // Recargar la tabla
                alert('Nómina actualizada exitosamente!');
            } catch (error) {
                console.error('Error al actualizar nómina:', error);
                alert(`Error al actualizar nómina: ${error.message}`);
            }
        });

        // Función para eliminar una nómina
        async function deleteNomina(id) {
            if (!confirm('¿Estás seguro de que quieres eliminar esta nómina?')) {
                return;
            }

            try {
                const response = await fetch(window.location.origin + `/api/nominas/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                loadNominas(); // Recargar la tabla
                alert('Nómina eliminada exitosamente!');
            } catch (error) {
                console.error('Error al eliminar nómina:', error);
                alert(`Error al eliminar nómina: ${error.message}`);
            }
        }

        // Cargar opciones de empleados y nóminas cuando la página se carga
        document.addEventListener('DOMContentLoaded', async () => {
            await loadEmpleadoOptions(); // Cargar empleados primero
            loadNominas(); // Luego cargar las nóminas
        });
    </script>
</body>
</html>
