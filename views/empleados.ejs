<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Empleados de Acme Corporate</title>
    <!-- Enlace a tu archivo CSS personalizado -->
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="background"></div>
    <div class="page-wrapper"> <!-- Contenedor principal de la página -->
        <h1 class="page-main-title">Empleados de Acme Corporate</h1> <!-- Título principal de la página -->
        
        <div class="content-grid"> <!-- Contenedor para organizar el formulario y la tabla lado a lado -->
            <!-- Formulario para Crear Nuevo Empleado -->
            <form id="createEmpleadoForm" class="form-section glass-card modal-form-grid"> <!-- 'glass-card' aplicado aquí -->
                <h2>Crear Nuevo Empleado</h2>
                
                <div class="form-group">
                    <label for="documento">Documento:</label>
                    <input type="text" id="documento" name="documento" required>
                </div>
                <div class="form-group">
                    <label for="nombre">Nombre:</label>
                    <input type="text" id="nombre" name="nombre" required>
                </div>
                <div class="form-group">
                    <label for="apellido">Apellido:</label>
                    <input type="text" id="apellido" name="apellido" required>
                </div>
                <div class="form-group">
                    <label for="email">Email:</label>
                    <input type="email" id="email" name="email" required>
                </div>
                <div class="form-group">
                    <label for="edad">Edad:</label>
                    <input type="number" id="edad" name="edad" required>
                </div>
                <div class="form-group">
                    <label for="ciudad">Ciudad:</label>
                    <input type="text" id="ciudad" name="ciudad">
                </div>
                <div class="form-group">
                    <label for="barrio">Barrio:</label>
                    <input type="text" id="barrio" name="barrio">
                </div>
                <div class="form-group">
                    <label for="roles">Roles (separados por coma):</label>
                    <input type="text" id="roles" name="roles">
                </div>
                <div class="form-group">
                    <label for="salarioBase">Salario Base:</label>
                    <input type="number" step="0.01" id="salarioBase" name="salarioBase" required>
                </div>
                <div class="form-group">
                    <label for="areaId">Área:</label>
                    <select id="areaId" name="areaId" required>
                        <option value="">Seleccione un área</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="cargoId">Cargo:</label>
                    <select id="cargoId" name="cargoId" required>
                        <option value="">Seleccione un cargo</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="fechaContratacion">Fecha de Contratación:</label>
                    <input type="date" id="fechaContratacion" name="fechaContratacion" required>
                </div>

                <div class="form-group full-width text-center"> <!-- Clase 'full-width' y 'text-center' -->
                    <button type="submit" class="form-submit-btn">
                        Añadir Empleado
                    </button>
                </div>
            </form>

            <!-- Tabla de Empleados -->
            <div class="table-section glass-card"> <!-- 'glass-card' aplicado aquí -->
                <h2>Empleados Existentes</h2> <!-- Título para la tabla -->
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Documento</th>
                                <th>Nombre Completo</th>
                                <th>Email</th>
                                <th>Edad</th>
                                <th>Ciudad</th>
                                <th>Barrio</th>
                                <th>Roles</th>
                                <th>Salario Base</th>
                                <th>Área</th>
                                <th>Cargo</th>
                                <th>Fecha Contratación</th>
                                <th class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="empleadosTableBody">
                            <!-- Los datos de los empleados se cargarán aquí dinámicamente -->
                            <tr>
                                <td colspan="13" class="table-message">Cargando empleados...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="back-button-wrapper"> <!-- Contenedor para el botón de volver -->
            <a href="/" class="back-to-main-btn">
                Volver a la Página Principal
            </a>
        </div>
    </div>

    <!-- Modal para Editar Empleado -->
    <div id="editEmpleadoModal" class="modal">
        <div class="modal-content large">
            <span class="close-button" onclick="closeEditModal()">&times;</span>
            <h2>Editar Empleado</h2>
            <form id="editEmpleadoForm" class="modal-form-grid">
                <input type="hidden" id="editEmpleadoId">
                <div class="form-group">
                    <label for="editDocumento">Documento:</label>
                    <input type="text" id="editDocumento" name="documento" required>
                </div>
                <div class="form-group">
                    <label for="editNombre">Nombre:</label>
                    <input type="text" id="editNombre" name="nombre" required>
                </div>
                <div class="form-group">
                    <label for="editApellido">Apellido:</label>
                    <input type="text" id="editApellido" name="apellido" required>
                </div>
                <div class="form-group">
                    <label for="editEmail">Email:</label>
                    <input type="email" id="editEmail" name="email" required>
                </div>
                <div class="form-group">
                    <label for="editEdad">Edad:</label>
                    <input type="number" id="editEdad" name="edad" required>
                </div>
                <div class="form-group">
                    <label for="editCiudad">Ciudad:</label>
                    <input type="text" id="editCiudad" name="ciudad">
                </div>
                <div class="form-group">
                    <label for="editBarrio">Barrio:</label>
                    <input type="text" id="editBarrio" name="barrio">
                </div>
                <div class="form-group">
                    <label for="editRoles">Roles (separados por coma):</label>
                    <input type="text" id="editRoles" name="roles">
                </div>
                <div class="form-group">
                    <label for="editSalarioBase">Salario Base:</label>
                    <input type="number" step="0.01" id="editSalarioBase" name="salarioBase" required>
                </div>
                <div class="form-group">
                    <label for="editAreaId">Área:</label>
                    <select id="editAreaId" name="areaId" required>
                        <option value="">Seleccione un área</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editCargoId">Cargo:</label>
                    <select id="editCargoId" name="cargoId" required>
                        <option value="">Seleccione un cargo</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editFechaContratacion">Fecha de Contratación:</label>
                    <input type="date" id="editFechaContratacion" name="fechaContratacion" required>
                </div>

                <div class="form-group full-width text-center">
                    <button type="submit" class="form-submit-btn">
                        Guardar Cambios
                    </button>
                    <button type="button" onclick="closeEditModal()" class="form-submit-btn cancel-btn">
                        Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        const empleadosTableBody = document.getElementById('empleadosTableBody');
        const createEmpleadoForm = document.getElementById('createEmpleadoForm');
        const editEmpleadoModal = document.getElementById('editEmpleadoModal');
        const editEmpleadoForm = document.getElementById('editEmpleadoForm');
        const editEmpleadoId = document.getElementById('editEmpleadoId');
        const editDocumento = document.getElementById('editDocumento');
        const editNombre = document.getElementById('editNombre');
        const editApellido = document.getElementById('editApellido');
        const editEmail = document.getElementById('editEmail');
        const editEdad = document.getElementById('editEdad');
        const editCiudad = document.getElementById('editCiudad');
        const editBarrio = document.getElementById('editBarrio');
        const editRoles = document.getElementById('editRoles');
        const editSalarioBase = document.getElementById('editSalarioBase');
        const editAreaId = document.getElementById('editAreaId');
        const editCargoId = document.getElementById('editCargoId');
        const editFechaContratacion = document.getElementById('editFechaContratacion');

        // Función para cargar áreas y cargos para los selectores
        async function loadSelectOptions() {
            try {
                const [areasResponse, cargosResponse] = await Promise.all([
                    fetch(window.location.origin + '/api/areas'),
                    fetch(window.location.origin + '/api/cargos')
                ]);

                const areas = await areasResponse.json();
                const cargos = await cargosResponse.json();

                const areaSelects = [document.getElementById('areaId'), editAreaId];
                const cargoSelects = [document.getElementById('cargoId'), editCargoId];

                areaSelects.forEach(select => {
                    select.innerHTML = '<option value="">Seleccione un área</option>';
                    areas.forEach(area => {
                        const option = document.createElement('option');
                        option.value = area._id;
                        option.textContent = area.nombre;
                        select.appendChild(option);
                    });
                });

                cargoSelects.forEach(select => {
                    select.innerHTML = '<option value="">Seleccione un cargo</option>';
                    cargos.forEach(cargo => {
                        const option = document.createElement('option');
                        option.value = cargo._id;
                        option.textContent = cargo.nombre;
                        select.appendChild(option);
                    });
                });

            } catch (error) {
                console.error('Error al cargar opciones de select:', error);
                alert('Error al cargar áreas y cargos para los selectores.');
            }
        }

        // Función para cargar los empleados desde la API
        async function loadEmpleados() {
            empleadosTableBody.innerHTML = `<tr><td colspan="13" class="table-message">Cargando empleados...</td></tr>`;
            try {
                const response = await fetch(window.location.origin + '/api/empleados'); 
                if (!response.ok) {
                    throw new Error(`Error HTTP: ${response.status}`);
                }
                const empleados = await response.json();

                empleadosTableBody.innerHTML = ''; // Limpiar la tabla
                if (empleados.length === 0) {
                    empleadosTableBody.innerHTML = `<tr><td colspan="13" class="table-message">No se encontraron empleados.</td></tr>`;
                    return;
                }

                empleados.forEach(empleado => {
                    const row = document.createElement('tr');
                    const fechaContratacion = empleado.fechaContratacion ? new Date(empleado.fechaContratacion).toLocaleDateString() : 'N/A';
                    row.innerHTML = `
                        <td>${empleado._id}</td>
                        <td>${empleado.documento}</td>
                        <td>${empleado.nombre} ${empleado.apellido}</td>
                        <td>${empleado.email}</td>
                        <td>${empleado.edad}</td>
                        <td>${empleado.direccion ? empleado.direccion.ciudad : 'N/A'}</td>
                        <td>${empleado.direccion ? empleado.direccion.barrio : 'N/A'}</td>
                        <td>${empleado.roles ? empleado.roles.join(', ') : 'N/A'}</td>
                        <td>$${empleado.salarioBase ? empleado.salarioBase.toFixed(2) : '0.00'}</td>
                        <td>${empleado.area ? empleado.area.nombre : 'N/A'}</td>
                        <td>${empleado.cargo ? empleado.cargo.nombre : 'N/A'}</td>
                        <td>${fechaContratacion}</td>
                        <td class="action-buttons">
                            <button onclick="openEditModal(
                                '${empleado._id}',
                                '${empleado.documento}',
                                '${empleado.nombre}',
                                '${empleado.apellido}',
                                '${empleado.email}',
                                ${empleado.edad},
                                '${empleado.direccion ? empleado.direccion.ciudad : ''}',
                                '${empleado.direccion ? empleado.direccion.barrio : ''}',
                                '${empleado.roles ? empleado.roles.join(',') : ''}',
                                ${empleado.salarioBase},
                                '${empleado.areaId}',
                                '${empleado.cargoId}',
                                '${empleado.fechaContratacion ? empleado.fechaContratacion.split('T')[0] : ''}'
                            )"
                                class="edit-btn">Editar</button>
                            <button onclick="deleteEmpleado('${empleado._id}')" class="delete-btn">Eliminar</button>
                        </td>
                    `;
                    empleadosTableBody.appendChild(row);
                });

            } catch (error) {
                console.error('Error al cargar los empleados:', error);
                empleadosTableBody.innerHTML = `<tr><td colspan="13" class="table-message table-error">Error al cargar los empleados: ${error.message}</td></tr>`;
            }
        }

        // Función para crear un nuevo empleado
        createEmpleadoForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const formData = new FormData(createEmpleadoForm);
            const data = Object.fromEntries(formData.entries());

            // Convertir roles a array
            data.roles = data.roles ? data.roles.split(',').map(r => r.trim()) : [];

            try {
                const response = await fetch(window.location.origin + '/api/empleados', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                createEmpleadoForm.reset(); // Limpiar el formulario
                loadEmpleados(); // Recargar la tabla
                alert('Empleado creado exitosamente!');
            } catch (error) {
                console.error('Error al crear empleado:', error);
                alert(`Error al crear empleado: ${error.message}`);
            }
        });

        // Funciones para el modal de edición
        function openEditModal(id, documento, nombre, apellido, email, edad, ciudad, barrio, roles, salarioBase, areaId, cargoId, fechaContratacion) {
            editEmpleadoId.value = id;
            editDocumento.value = documento;
            editNombre.value = nombre;
            editApellido.value = apellido;
            editEmail.value = email;
            editEdad.value = edad;
            editCiudad.value = ciudad;
            editBarrio.value = barrio;
            editRoles.value = roles; // Viene como string separado por comas
            editSalarioBase.value = salarioBase;
            editAreaId.value = areaId;
            editCargoId.value = cargoId;
            editFechaContratacion.value = fechaContratacion; // Formato YYYY-MM-DD

            editEmpleadoModal.style.display = 'flex'; // Mostrar el modal
        }

        function closeEditModal() {
            editEmpleadoModal.style.display = 'none'; // Ocultar el modal
        }

        // Función para actualizar un empleado
        editEmpleadoForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const id = editEmpleadoId.value;
            const formData = new FormData(editEmpleadoForm);
            const data = Object.fromEntries(formData.entries());
            
            // Convertir roles a array
            data.roles = data.roles ? data.roles.split(',').map(r => r.trim()) : [];

            try {
                const response = await fetch(window.location.origin + `/api/empleados/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                closeEditModal(); // Cerrar el modal
                loadEmpleados(); // Recargar la tabla
                alert('Empleado actualizado exitosamente!');
            } catch (error) {
                console.error('Error al actualizar empleado:', error);
                alert(`Error al actualizar empleado: ${error.message}`);
            }
        });

        // Función para eliminar un empleado
        async function deleteEmpleado(id) {
            if (!confirm('¿Estás seguro de que quieres eliminar este empleado?')) {
                return;
            }

            try {
                const response = await fetch(window.location.origin + `/api/empleados/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                loadEmpleados(); // Recargar la tabla
                alert('Empleado eliminado exitosamente!');
            } catch (error) {
                console.error('Error al eliminar empleado:', error);
                alert(`Error al eliminar empleado: ${error.message}`);
            }
        }

        // Cargar opciones de select y empleados cuando la página se carga
        document.addEventListener('DOMContentLoaded', async () => {
            await loadSelectOptions(); // Cargar áreas y cargos primero
            loadEmpleados(); // Luego cargar los empleados
        });
    </script>
</body>
</html>