<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Áreas de Acme Corporate</title>
    <!-- Enlace a tu archivo CSS personalizado -->
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="background"></div>
    <div class="page-wrapper"> <!-- Contenedor principal de la página -->
        <h1 class="page-main-title">Áreas de Acme Corporate</h1> <!-- Título principal de la página -->
        
        <div class="content-grid"> <!-- Contenedor para organizar el formulario y la tabla lado a lado -->
            <!-- Formulario para Crear Nueva Área -->
            <form id="createAreaForm" class="form-section glass-card"> <!-- 'glass-card' aplicado aquí -->
                <h2>Crear Nueva Área</h2>
                <div class="form-group">
                    <label for="areaName">Nombre del Área:</label>
                    <input type="text" id="areaName" name="nombre" required>
                </div>
                <button type="submit" class="form-submit-btn">
                    Añadir Área
                </button>
            </form>

            <!-- Tabla de Áreas -->
            <div class="table-section glass-card"> <!-- 'glass-card' aplicado aquí -->
                <h2>Áreas Existentes</h2> <!-- Título para la tabla -->
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nombre del Área</th>
                                <th class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="areasTableBody">
                            <!-- Los datos de las áreas se cargarán aquí dinámicamente -->
                            <tr>
                                <td colspan="3" class="table-message">Cargando áreas...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="back-button-wrapper"> <!-- Contenedor para el botón de volver -->
            <a href="/" class="back-to-main-btn">
                Volver a la Página Principal
            </a>
        </div>
    </div>

    <!-- Modal para Editar Área -->
    <div id="editAreaModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeEditModal()">&times;</span>
            <h2>Editar Área</h2>
            <form id="editAreaForm">
                <input type="hidden" id="editAreaId">
                <div class="form-group">
                    <label for="editAreaName">Nombre del Área:</label>
                    <input type="text" id="editAreaName" name="nombre" required>
                </div>
                <button type="submit" class="form-submit-btn">
                    Guardar Cambios
                </button>
                <button type="button" onclick="closeEditModal()" class="form-submit-btn cancel-btn">
                    Cancelar
                </button>
            </form>
        </div>
    </div>

    <script>
        const areasTableBody = document.getElementById('areasTableBody');
        const createAreaForm = document.getElementById('createAreaForm');
        const editAreaModal = document.getElementById('editAreaModal');
        const editAreaForm = document.getElementById('editAreaForm');
        const editAreaId = document.getElementById('editAreaId');
        const editAreaName = document.getElementById('editAreaName');

        // Función para cargar las áreas desde la API
        async function loadAreas() {
            areasTableBody.innerHTML = `<tr><td colspan="3" class="table-message">Cargando áreas...</td></tr>`;
            try {
                const response = await fetch(window.location.origin + '/api/areas');
                
                if (!response.ok) {
                    throw new Error(`Error HTTP: ${response.status}`);
                }
                
                const areas = await response.json();

                areasTableBody.innerHTML = ''; // Limpiar la tabla
                if (areas.length === 0) {
                    areasTableBody.innerHTML = `<tr><td colspan="3" class="table-message">No se encontraron áreas.</td></tr>`;
                    return;
                }

                areas.forEach(area => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${area._id}</td>
                        <td>${area.nombre}</td>
                        <td class="action-buttons">
                            <button onclick="openEditModal('${area._id}', '${area.nombre}')" class="edit-btn">Editar</button>
                            <button onclick="deleteArea('${area._id}')" class="delete-btn">Eliminar</button>
                        </td>
                    `;
                    areasTableBody.appendChild(row);
                });

            } catch (error) {
                console.error('Error al cargar las áreas:', error);
                areasTableBody.innerHTML = `<tr><td colspan="3" class="table-message table-error">Error al cargar las áreas: ${error.message}</td></tr>`;
            }
        }

        // Función para crear un nuevo área
        createAreaForm.addEventListener('submit', async (event) => {
            event.preventDefault(); // Evitar el envío por defecto del formulario
            const areaName = document.getElementById('areaName').value;

            try {
                const response = await fetch(window.location.origin + '/api/areas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nombre: areaName })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                document.getElementById('areaName').value = ''; // Limpiar el formulario
                loadAreas(); // Recargar la tabla para mostrar la nueva área
                alert('Área creada exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al crear área:', error);
                alert(`Error al crear área: ${error.message}`); // Usar alert temporalmente
            }
        });

        // Funciones para el modal de edición
        function openEditModal(id, name) {
            editAreaId.value = id;
            editAreaName.value = name;
            editAreaModal.style.display = 'flex'; // Mostrar el modal
        }

        function closeEditModal() {
            editAreaModal.style.display = 'none'; // Ocultar el modal
        }

        // Función para actualizar un área
        editAreaForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const id = editAreaId.value;
            const newName = editAreaName.value;

            try {
                const response = await fetch(window.location.origin + `/api/areas/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nombre: newName })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                closeEditModal(); // Cerrar el modal
                loadAreas(); // Recargar la tabla
                alert('Área actualizada exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al actualizar área:', error);
                alert(`Error al actualizar área: ${error.message}`); // Usar alert temporalmente
            }
        });

        // Función para eliminar un área
        async function deleteArea(id) {
            if (!confirm('¿Estás seguro de que quieres eliminar esta área?')) { // Usar confirm temporalmente
                return;
            }

            try {
                const response = await fetch(window.location.origin + `/api/areas/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                loadAreas(); // Recargar la tabla
                alert('Área eliminada exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al eliminar área:', error);
                alert(`Error al eliminar área: ${error.message}`); // Usar alert temporalmente
            }
        }

        // Cargar las áreas cuando la página se carga
        document.addEventListener('DOMContentLoaded', loadAreas);
    </script>
</body>
</html>