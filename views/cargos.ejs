<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cargos de Acme Corporate</title>
    <!-- Enlace a tu archivo CSS personalizado -->
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="background"></div>
    <div class="page-wrapper"> <!-- Contenedor principal de la página -->
        <h1 class="page-main-title">Cargos de Acme Corporate</h1> <!-- Título principal de la página -->
        
        <div class="content-grid"> <!-- Contenedor para organizar el formulario y la tabla lado a lado -->
            <!-- Formulario para Crear Nuevo Cargo -->
            <form id="createCargoForm" class="form-section glass-card"> <!-- 'glass-card' aplicado aquí -->
                <h2>Crear Nuevo Cargo</h2>
                <div class="form-group">
                    <label for="cargoName">Nombre del Cargo:</label>
                    <input type="text" id="cargoName" name="nombre" required>
                </div>
                <button type="submit" class="form-submit-btn">
                    Añadir Cargo
                </button>
            </form>

            <!-- Tabla de Cargos -->
            <div class="table-section glass-card"> <!-- 'glass-card' aplicado aquí -->
                <h2>Cargos Existentes</h2> <!-- Título para la tabla -->
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nombre del Cargo</th>
                                <th class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="cargosTableBody">
                            <!-- Los datos de los cargos se cargarán aquí dinámicamente -->
                            <tr>
                                <td colspan="3" class="table-message">Cargando cargos...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="back-button-wrapper"> <!-- Contenedor para el botón de volver -->
            <a href="/" class="back-to-main-btn">
                Volver a la Página Principal
            </a>
        </div>
    </div>

    <!-- Modal para Editar Cargo -->
    <div id="editCargoModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeEditModal()">&times;</span>
            <h2>Editar Cargo</h2>
            <form id="editCargoForm">
                <input type="hidden" id="editCargoId">
                <div class="form-group">
                    <label for="editCargoName">Nombre del Cargo:</label>
                    <input type="text" id="editCargoName" name="nombre" required>
                </div>
                <button type="submit" class="form-submit-btn">
                    Guardar Cambios
                </button>
                <button type="button" onclick="closeEditModal()" class="form-submit-btn cancel-btn">
                    Cancelar
                </button>
            </form>
        </div>
    </div>

    <script>
        const cargosTableBody = document.getElementById('cargosTableBody');
        const createCargoForm = document.getElementById('createCargoForm');
        const editCargoModal = document.getElementById('editCargoModal');
        const editCargoForm = document.getElementById('editCargoForm');
        const editCargoId = document.getElementById('editCargoId');
        const editCargoName = document.getElementById('editCargoName');

        // Función para cargar los cargos desde la API
        async function loadCargos() {
            cargosTableBody.innerHTML = `<tr><td colspan="3" class="table-message">Cargando cargos...</td></tr>`;
            try {
                const response = await fetch(window.location.origin + '/api/cargos');
                if (!response.ok) {
                    throw new Error(`Error HTTP: ${response.status}`);
                }
                const cargos = await response.json();

                cargosTableBody.innerHTML = ''; // Limpiar la tabla
                if (cargos.length === 0) {
                    cargosTableBody.innerHTML = `<tr><td colspan="3" class="table-message">No se encontraron cargos.</td></tr>`;
                    return;
                }

                cargos.forEach(cargo => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${cargo._id}</td>
                        <td>${cargo.nombre}</td>
                        <td class="action-buttons">
                            <button onclick="openEditModal('${cargo._id}', '${cargo.nombre}')" class="edit-btn">Editar</button>
                            <button onclick="deleteCargo('${cargo._id}')" class="delete-btn">Eliminar</button>
                        </td>
                    `;
                    cargosTableBody.appendChild(row);
                });

            } catch (error) {
                console.error('Error al cargar los cargos:', error);
                cargosTableBody.innerHTML = `<tr><td colspan="3" class="table-message table-error">Error al cargar los cargos: ${error.message}</td></tr>`;
            }
        }

        // Función para crear un nuevo cargo
        createCargoForm.addEventListener('submit', async (event) => {
            event.preventDefault(); // Evitar el envío por defecto del formulario
            const cargoName = document.getElementById('cargoName').value;

            try {
                const response = await fetch(window.location.origin + '/api/cargos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nombre: cargoName })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                document.getElementById('cargoName').value = ''; // Limpiar el formulario
                loadCargos(); // Recargar la tabla para mostrar el nuevo cargo
                alert('Cargo creado exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al crear cargo:', error);
                alert(`Error al crear cargo: ${error.message}`); // Usar alert temporalmente
            }
        });

        // Funciones para el modal de edición
        function openEditModal(id, name) {
            editCargoId.value = id;
            editCargoName.value = name;
            editCargoModal.style.display = 'flex'; // Mostrar el modal
        }

        function closeEditModal() {
            editCargoModal.style.display = 'none'; // Ocultar el modal
        }

        // Función para actualizar un cargo
        editCargoForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const id = editCargoId.value;
            const newName = editCargoName.value;

            try {
                const response = await fetch(window.location.origin + `/api/cargos/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nombre: newName })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                closeEditModal(); // Cerrar el modal
                loadCargos(); // Recargar la tabla
                alert('Cargo actualizado exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al actualizar cargo:', error);
                alert(`Error al actualizar cargo: ${error.message}`); // Usar alert temporalmente
            }
        });

        // Función para eliminar un cargo
        async function deleteCargo(id) {
            if (!confirm('¿Estás seguro de que quieres eliminar este cargo?')) { // Usar confirm temporalmente
                return;
            }

            try {
                const response = await fetch(window.location.origin + `/api/cargos/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                loadCargos(); // Recargar la tabla
                alert('Cargo eliminado exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al eliminar cargo:', error);
                alert(`Error al eliminar cargo: ${error.message}`); // Usar alert temporalmente
            }
        }

        // Cargar los cargos cuando la página se carga
        document.addEventListener('DOMContentLoaded', loadCargos);
    </script>
</body>
</html>
