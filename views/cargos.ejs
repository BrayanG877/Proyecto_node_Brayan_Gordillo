<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cargos de Acme Corporate</title>
    <!-- Carga de Tailwind CSS para estilos rápidos y modernos -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Fuente Inter para una mejor legibilidad */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Estilos para el modal */
        .modal {
            display: none; /* Oculto por defecto */
            position: fixed; /* Posición fija para cubrir toda la pantalla */
            z-index: 1000; /* Por encima de otros elementos */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto; /* Habilitar scroll si el contenido es muy grande */
            background-color: rgba(0,0,0,0.4); /* Fondo semi-transparente */
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            width: 90%;
            max-width: 500px;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col items-center py-8">
    <div class="bg-white p-8 rounded-lg shadow-lg max-w-4xl w-full">
        <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Cargos de Acme Corporate</h1>
        
        <!-- Formulario para Crear Nuevo Cargo -->
        <form id="createCargoForm" class="mb-8 p-6 bg-blue-50 rounded-lg shadow-inner">
            <h2 class="text-xl font-semibold text-blue-700 mb-4">Crear Nuevo Cargo</h2>
            <div class="mb-4">
                <label for="cargoName" class="block text-gray-700 text-sm font-bold mb-2">Nombre del Cargo:</label>
                <input type="text" id="cargoName" name="nombre" required
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>
            <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out">
                Añadir Cargo
            </button>
        </form>

        <div class="overflow-x-auto mb-8">
            <table class="min-w-full bg-white border border-gray-200 rounded-lg">
                <thead>
                    <tr class="bg-gray-200 text-gray-700 uppercase text-sm leading-normal">
                        <th class="py-3 px-6 text-left rounded-tl-lg">ID</th>
                        <th class="py-3 px-6 text-left">Nombre del Cargo</th>
                        <th class="py-3 px-6 text-center rounded-tr-lg">Acciones</th>
                    </tr>
                </thead>
                <tbody id="cargosTableBody" class="text-gray-600 text-sm font-light">
                    <!-- Los datos de los cargos se cargarán aquí dinámicamente -->
                    <tr>
                        <td colspan="3" class="py-4 px-6 text-center">Cargando cargos...</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="mt-8 text-center">
            <a href="/" class="inline-block bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out">
                Volver a la Página Principal
            </a>
        </div>
    </div>

    <!-- Modal para Editar Cargo -->
    <div id="editCargoModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeEditModal()">&times;</span>
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Editar Cargo</h2>
            <form id="editCargoForm">
                <input type="hidden" id="editCargoId">
                <div class="mb-4">
                    <label for="editCargoName" class="block text-gray-700 text-sm font-bold mb-2">Nombre del Cargo:</label>
                    <input type="text" id="editCargoName" name="nombre" required
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
                <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out">
                    Guardar Cambios
                </button>
                <button type="button" onclick="closeEditModal()" class="ml-2 bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out">
                    Cancelar
                </button>
            </form>
        </div>
    </div>

    <script>
        const cargosTableBody = document.getElementById('cargosTableBody');
        const createCargoForm = document.getElementById('createCargoForm');
        const editCargoModal = document.getElementById('editCargoModal');
        const editCargoForm = document.getElementById('editCargoForm');
        const editCargoId = document.getElementById('editCargoId');
        const editCargoName = document.getElementById('editCargoName');

        // Función para cargar los cargos desde la API
        async function loadCargos() {
            cargosTableBody.innerHTML = `<tr><td colspan="3" class="py-4 px-6 text-center">Cargando cargos...</td></tr>`;
            try {
                const response = await fetch(window.location.origin + '/api/cargos');
                if (!response.ok) {
                    throw new Error(`Error HTTP: ${response.status}`);
                }
                const cargos = await response.json();

                cargosTableBody.innerHTML = ''; // Limpiar la tabla
                if (cargos.length === 0) {
                    cargosTableBody.innerHTML = `<tr><td colspan="3" class="py-4 px-6 text-center text-gray-500">No se encontraron cargos.</td></tr>`;
                    return;
                }

                cargos.forEach(cargo => {
                    const row = document.createElement('tr');
                    row.classList.add('border-b', 'border-gray-200', 'hover:bg-gray-100');
                    row.innerHTML = `
                        <td class="py-3 px-6 text-left whitespace-nowrap">${cargo._id}</td>
                        <td class="py-3 px-6 text-left">${cargo.nombre}</td>
                        <td class="py-3 px-6 text-center">
                            <button onclick="openEditModal('${cargo._id}', '${cargo.nombre}')" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-1 px-3 rounded-lg text-xs shadow-sm transition duration-300 ease-in-out mr-2">Editar</button>
                            <button onclick="deleteCargo('${cargo._id}')" class="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-lg text-xs shadow-sm transition duration-300 ease-in-out">Eliminar</button>
                        </td>
                    `;
                    cargosTableBody.appendChild(row);
                });

            } catch (error) {
                console.error('Error al cargar los cargos:', error);
                cargosTableBody.innerHTML = `<tr><td colspan="3" class="py-4 px-6 text-center text-red-500">Error al cargar los cargos: ${error.message}</td></tr>`;
            }
        }

        // Función para crear un nuevo cargo
        createCargoForm.addEventListener('submit', async (event) => {
            event.preventDefault(); // Evitar el envío por defecto del formulario
            const cargoName = document.getElementById('cargoName').value;

            try {
                const response = await fetch(window.location.origin + '/api/cargos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nombre: cargoName })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                document.getElementById('cargoName').value = ''; // Limpiar el formulario
                loadCargos(); // Recargar la tabla para mostrar el nuevo cargo
                alert('Cargo creado exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al crear cargo:', error);
                alert(`Error al crear cargo: ${error.message}`); // Usar alert temporalmente
            }
        });

        // Funciones para el modal de edición
        function openEditModal(id, name) {
            editCargoId.value = id;
            editCargoName.value = name;
            editCargoModal.style.display = 'flex'; // Mostrar el modal
        }

        function closeEditModal() {
            editCargoModal.style.display = 'none'; // Ocultar el modal
        }

        // Función para actualizar un cargo
        editCargoForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const id = editCargoId.value;
            const newName = editCargoName.value;

            try {
                const response = await fetch(window.location.origin + `/api/cargos/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ nombre: newName })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                closeEditModal(); // Cerrar el modal
                loadCargos(); // Recargar la tabla
                alert('Cargo actualizado exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al actualizar cargo:', error);
                alert(`Error al actualizar cargo: ${error.message}`); // Usar alert temporalmente
            }
        });

        // Función para eliminar un cargo
        async function deleteCargo(id) {
            if (!confirm('¿Estás seguro de que quieres eliminar este cargo?')) { // Usar confirm temporalmente
                return;
            }

            try {
                const response = await fetch(window.location.origin + `/api/cargos/${id}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error HTTP: ${response.status}`);
                }

                loadCargos(); // Recargar la tabla
                alert('Cargo eliminado exitosamente!'); // Usar alert temporalmente
            } catch (error) {
                console.error('Error al eliminar cargo:', error);
                alert(`Error al eliminar cargo: ${error.message}`); // Usar alert temporalmente
            }
        }

        // Cargar los cargos cuando la página se carga
        document.addEventListener('DOMContentLoaded', loadCargos);
    </script>
</body>
</html>
